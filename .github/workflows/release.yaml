name: Release

on:
  push:
    tags:
      - "v*" # 匹配所有以 v 开头的标签
      - "v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+" # v1.0.0-beta.1
  workflow_dispatch:
    inputs:
      draft:
        type: boolean
        default: true
        description: "创建草稿发布"
      version:
        type: string
        description: "发布版本 (例如: v1.0.0)"
        required: true
      release:
        description: "执行发布任务"
        type: boolean
        default: true

env:
  # Define the rust version to use
  RUST_VERSION: 1.81.0
  # Rust build arguments
  BUILD_ARGS: "--release --all-features"
  # The binary name
  BIN_NAME: "uniclipboard"
  # Docker token required to pull images from DockerHub
  DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    # By default, runs on Ubuntu, otherwise, override with the desired os
    runs-on: ${{ matrix.platform.os || 'ubuntu-20.04' }}
    strategy:
      matrix:
        # Set platforms you want to build your binaries on
        platform:
          # Linux
          # The name is used for pretty print
          - name: Linux x86_64
            # The used Rust target architecture
            target: x86_64-unknown-linux-gnu
          # - name: Linux aarch64
          #   target: aarch64-unknown-linux-gnu

          # Mac OS
          - name: MacOS x86_64
            target: x86_64-apple-darwin
          - name: MacOS aarch64
            target: aarch64-apple-darwin

          # Windows
          - name: Windows x86_64
            # Use another GitHub action OS
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v4

      # Linux & Windows
      - name: Install rust toolchain
        if: ${{ !contains(matrix.platform.target, 'apple') }}
        uses: actions-rs/toolchain@v1
        with:
          # We setup Rust toolchain and the desired target
          profile: minimal
          toolchain: "${{ env.RUST_VERSION }}"
          override: true
          target: ${{ matrix.platform.target }}
          components: rustfmt, clippy

      # Linux & Windows 构建，缓存依赖
      - name: Cache dependencies for ${{ matrix.platform.name }}
        if: ${{ !contains(matrix.platform.target, 'apple') }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build ${{ matrix.platform.name }} binary
        if: ${{ !contains(matrix.platform.target, 'apple') }}
        uses: actions-rs/cargo@v1
        env:
          CARGO_BUILD_JOBS: 4
        # We use cross-rs if not running on x86_64 architecture on Linux
        with:
          command: build
          use-cross: ${{ !contains(matrix.platform.target, 'x86_64') }}
          args: ${{ env.BUILD_ARGS }} --target ${{ matrix.platform.target }}

      # Mac OS
      - name: Login to DockerHub
        if: contains(matrix.platform.target, 'apple')
        # We log on DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_LOGIN }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Cache Cargo and build directories
        if: contains(matrix.platform.target, 'apple')
        uses: actions/cache@v3
        with:
          path: |
            target
          key: ${{ runner.os }}-${{ matrix.platform.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.target }}-cargo-

      - name: Build ${{ matrix.platform.name }} binary
        if: contains(matrix.platform.target, 'apple')
        # We use a dedicated Rust image containing required Apple libraries to cross-compile on multiple archs
        run: |
          docker run --rm \
            --volume "${PWD}":/root/src \
            --volume "${PWD}/target":/root/src/target \
            --workdir /root/src \
            joseluisq/rust-linux-darwin-builder:${{ env.RUST_VERSION }} \
            sh -c "CC=o64-clang CXX=o64-clang++ RUSTFLAGS='-C linker=o64-clang' cargo build ${{ env.BUILD_ARGS }} --target ${{ matrix.platform.target }}"

      - name: Store artifact
        uses: actions/upload-artifact@v4
        with:
          # Finally, we store the binary as GitHub artifact for later usage
          name: ${{ matrix.platform.target }}-${{ env.BIN_NAME }}
          path: target/${{ matrix.platform.target }}/release/${{ env.BIN_NAME }}${{ contains(matrix.platform.target, 'windows') && '.exe' || '' }}
          retention-days: 1

  release:
    name: Release
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true')
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v3

      - name: Install nfpm
        run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt update
          sudo apt install nfpm

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Goreleaser
      - name: Set up Go
        uses: actions/setup-go@v4

      - name: Set release version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Create temporary tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"

      - name: Display workspace status
        run: |
          git status
          echo "Contents of the current directory:"
          ls -R
          echo "Contents of the artifacts directory:"
          ls -R artifacts/

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --skip=validate --debug --config .goreleaser.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_RUST_CROSS }}

      - name: Debug Artifacts and Dist (After)
        run: |
          echo "Contents of artifacts directory:"
          ls -R artifacts/
          echo "Contents of dist directory:"
          ls -R dist/

  release-for-windows:
    name: Release for Windows
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true')
    runs-on: windows-latest
    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v3

      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; 
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; 
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        shell: powershell

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set up Go
        uses: actions/setup-go@v4

      - name: Set release version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            echo "RELEASE_VERSION=${{ github.event.inputs.version }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            echo "RELEASE_VERSION=$($env:GITHUB_REF -replace 'refs/tags/','')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        shell: powershell

      - name: Create temporary tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
        shell: powershell

      - name: Display replace-bin.ps1 content
        run: |
          Write-Host "Content of replace-bin.ps1:"
          Get-Content -Path .\scripts\replace-bin.ps1
        shell: powershell

      - name: Run GoReleaser for Windows
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --config .goreleaser-win.yml --skip=validate --debug
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_RUST_CROSS }}
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}

      - name: Debug Artifacts and Dist (After)
        run: |
          echo "Contents of artifacts directory:"
          Get-ChildItem -Recurse artifacts
          echo "Contents of dist directory:"
          Get-ChildItem -Recurse dist
        shell: powershell
